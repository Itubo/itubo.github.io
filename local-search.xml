<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>归并排序</title>
    <link href="/2022/10/30/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/10/30/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p><strong>归并排序（Mergin Sort）</strong> 是将两个或者两个以上有序表合并成一个有序表的过程。将两个有序表合并成一个有序表的过程称为 <strong>2-路归并</strong> 。</p><h3 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h3><p>假设初始序列含有 n 个记录，则可看成是 n 个有序的子序列，每个子序列的长度为 1，然后两两合并，得到 n&#x2F;2 （向上取整）个长度为 1 或者 2 的有序子序列；再两两归并，······，如此重复，直至得到一个长度为 n 的有序序列为止。</p><p><img src="F:\blog\myblog\themes\fluid\source\title\3\one.gif" alt="img"></p><p>以下面这个序列为例子：</p><p><img src="F:\blog\myblog\themes\fluid\source\title\3\two.png" alt="img"></p><h3 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><ul><li>平均时间复杂度：<img src="https://cdn.nlark.com/yuque/__latex/3b7b7fefc26f8911f38da86bd5ffa7b1.svg" alt="img"></li><li>最佳时间复杂度：<img src="https://cdn.nlark.com/yuque/__latex/e65a67ac353abeeff44c359310d05c02.svg" alt="img"></li><li>最差时间复杂度：<img src="https://cdn.nlark.com/yuque/__latex/3b7b7fefc26f8911f38da86bd5ffa7b1.svg" alt="img"></li><li>空间复杂度：<img src="https://cdn.nlark.com/yuque/__latex/e65a67ac353abeeff44c359310d05c02.svg" alt="img"></li><li>排序方式： In-place</li><li>稳定性：  稳定</li></ul><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li>是稳定排序。</li><li>可用于链式结构，且不需要附加存储空间，但递归实现是仍需开辟相应的递归工作栈。</li></ol><h3 id="Java-代码实现："><a href="#Java-代码实现：" class="headerlink" title="Java 代码实现："></a>Java 代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge_sort_recursive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span>[] res, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-keyword">if</span> (start &gt;= end) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> end - start, mid = (len &gt;&gt; <span class="hljs-number">1</span>) + start;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">start1</span> <span class="hljs-operator">=</span> start, end1 = mid;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">start2</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>, end2 = end;<br>    <span class="hljs-comment">//拆分</span><br>    merge_sort_recursive(arr, res, start1, end1);<br>    merge_sort_recursive(arr, res, start2, end2);<br>    <span class="hljs-comment">//归并</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> start;<br>    <span class="hljs-keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;<br>        res[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (start1 &lt;= end1) &#123;<br>        res[k++] = arr[start1++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (start2 &lt;= end2) &#123;<br>        res[k++] = arr[start2++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (k = start; k &lt;= end; k++) &#123;<br>        arr[k] = res[k];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> arr.length;<br>    <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>    merge_sort_recursive(arr, res, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中的var、let</title>
    <link href="/2022/10/30/JS%E4%B8%AD%E7%9A%84var%E3%80%81let/"/>
    <url>/2022/10/30/JS%E4%B8%AD%E7%9A%84var%E3%80%81let/</url>
    
    <content type="html"><![CDATA[<h3 id="var-和-let-的区别："><a href="#var-和-let-的区别：" class="headerlink" title="var 和 let 的区别："></a>var 和 let 的区别：</h3><p>var 是函数作用域，let 是块级作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildUrl</span>(<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-keyword">let</span> qs = <span class="hljs-string">&quot;?debug=true&quot;</span>; <br>    <span class="hljs-title function_">with</span>(<span class="hljs-params">location</span>)&#123; <span class="hljs-comment">//在严格模式下，with 不允许使用</span><br>        <span class="hljs-keyword">let</span> url = href + qs; <br>    &#125; <br>    <span class="hljs-keyword">return</span> url; <br>&#125; <br><span class="hljs-keyword">var</span> getEle = <span class="hljs-title function_">buildUrl</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(getEle);<span class="hljs-comment">// 报错，url is not defined 第 7 行</span><br></code></pre></td></tr></table></figure><p>因为 let 在 with 中使用，其作用域也仅限于 with 所拥有的花括号中。因此，用 let 声明的 url 在 with 外边 找不到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildUrl</span>(<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-keyword">let</span> qs = <span class="hljs-string">&quot;?debug=true&quot;</span>; <br>    <span class="hljs-title function_">with</span>(<span class="hljs-params">location</span>)&#123; <br>        <span class="hljs-keyword">var</span> url = href + qs; <br>    &#125; <br>    <span class="hljs-keyword">return</span> url; <br>&#125; <br><span class="hljs-keyword">var</span> getEle = <span class="hljs-title function_">buildUrl</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(getEle);<span class="hljs-comment">//正确输出文件位置</span><br></code></pre></td></tr></table></figure><p>我们先简单分析一下作用域链:</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/26688609/1663246460012-639aecc3-0de2-46fc-bd13-4ee825031be1.jpeg" alt="img"></p><p>如上图，下级可以访问上级作用域属性，但是上级不可以向下访问。因此代码中的 href 实际上是 <strong>location.href,</strong> 其中的qs也是函数中的。使用 let 声明时，url 只会被加入with 的作用域中。外部访问不到。但当使用 var 声明时，这个 url 是会在 函数初始化时。加入函数的作用域中。因此，在函数中，能访问到。</p><h3 id="变量声明："><a href="#变量声明：" class="headerlink" title="变量声明："></a>变量声明：</h3><ol><li>var 在声明的时候，会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在 with 语句中，最接近的上下文也是函数上下文。<strong>如果变量未经声明就被初始化了，那么它就会自动被添加到全局上下文。</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1,num2</span>) &#123;<br>    <span class="hljs-keyword">var</span> num = num1 + num2;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">let</span> res = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<span class="hljs-comment">//30</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<span class="hljs-comment">//报错</span><br><br><span class="hljs-comment">//不使用 var 声明 num </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1,num2</span>) &#123;<br>    num = num1 + num2;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">let</span> res = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<span class="hljs-comment">//30</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<span class="hljs-comment">//30</span><br></code></pre></td></tr></table></figure><p>注意：未声明就初始化变量，是一个错误。在严格模式下会报错。</p><ol><li>let 是块级作用域。在一个块中，如果 用 let 声明两次，则会报错，但是用 var ，重复的声明会被忽略。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/30/hello-world/"/>
    <url>/2022/10/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
